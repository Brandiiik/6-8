python

def heapify(arr, n, i):
    largest = i  # Инициализируем наибольший элемент как корень
    left = 2 * i + 1  # левый = 2*i + 1
    right = 2 * i + 2  # правый = 2*i + 2

    # Проверяем существует ли левый дочерний элемент больше, чем корень
    if left < n and arr[left] > arr[largest]:
        largest = left

    # Проверяем существует ли правый дочерний элемент больше, чем текущий лучший
    if right < n and arr[right] > arr[largest]:
        largest = right

    # Меняем корень, если нужно
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # своп
        # Применяем heapify к новому корню
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)

    # Построение max-heap
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # Один за другим извлекаем элементы из heap
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # меняем корень с последним элементом
        heapify(arr, i, 0)


cpp

#include <iostream>
#include <vector>

// Функция для heapify (приведение кучи)
void heapify(std::vector<int>& arr, int n, int i) {
    int largest = i; // Изначально корень считается наибольшим
    int left = 2 * i + 1; // левый дочерний
    int right = 2 * i + 2; // правый дочерний

    // Если левый дочерний больше текущего максимума
    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    // Если правый дочерний больше текущего максимума
    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    // Если самый большой не корень
    if (largest != i) {
        std::swap(arr[i], arr[largest]);
        // Рекурсивно heapify для подкучи
        heapify(arr, n, largest);
    }
}

// Функция для выполнения heap sort
void heapSort(std::vector<int>& arr) {
    int n = arr.size();

    // Построение max-heap
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // Один за другим извлекаем элементы из кучи
    for (int i = n - 1; i > 0; i--) {
        std::swap(arr[0], arr[i]);
        // Вызываем heapify для уменьшенной кучи
        heapify(arr, i, 0);
    }
}

// Вспомогательная функция для вывода массива
void printArray(const std::vector<int>& arr) {
    for (const int& num : arr) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> arr = {12, 11, 13, 5, 6, 7};
    std::cout << "Исходный массив: ";
    printArray(arr);

    heapSort(arr);

    std::cout << "Отсортированный массив: ";
    printArray(arr);

    return 0;
}
