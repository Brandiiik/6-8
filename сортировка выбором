python

def selection_sort(arr):
    # Проходим по всем элементам массива
    for i in range(len(arr)):
        # Предполагаем, что первый элемент - минимальный
        min_index = i
        # Ищем минимальный элемент в оставшейся части массива
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        # Меняем найденный минимальный элемент с первым элементом в неотсортированной части
        arr[i], arr[min_index] = arr[min_index], arr[i]

# Пример использования
if __name__ == "__main__":
    # Создаем тестовый массив
    test_array = [64, 25, 12, 22, 11]
    print("Исходный массив:", test_array)
    # Сортируем массив
    selection_sort(test_array)
    print("Отсортированный массив:", test_array)


C++

#include <iostream>
#include <vector>

// Функция сортировки выбором
void selectionSort(std::vector<int>& arr) {
    int n = arr.size();

    // Проходим по всем элементам массива
    for (int i = 0; i < n - 1; ++i) {
        // предполагаем, что текущий элемент минимальный
        int min_index = i;

        // ищем минимальный элемент в оставшейся части массива
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] < arr[min_index]) {
                min_index = j;
            }
        }

        // меняем местами найденный минимальный элемент с текущим
        std::swap(arr[i], arr[min_index]);
    }
}

int main() {
    // Создаем тестовый массив
    std::vector<int> test_array = {64, 25, 12, 22, 11};

    // Вывод исходного массива
    std::cout << "Исходный массив: ";
    for (int num : test_array) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    // Сортируем массив
    selectionSort(test_array);

    // Вывод отсортированного массива
    std::cout << "Отсортированный массив: ";
    for (int num : test_array) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
