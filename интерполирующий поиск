python

def interpolation_search(arr, lo, hi, x):
    # Проверка, что диапазон валиден
    if lo <= hi and arr[lo] <= x <= arr[hi]:
        # Предварительно вычисляем предполагаемую позицию
        # Избегаем деления на ноль
        if arr[hi] == arr[lo]:
            pos = lo
        else:
            pos = lo + ((hi - lo) * (x - arr[lo])) // (arr[hi] - arr[lo])

        # Проверка, находится ли позиция внутри диапазона
        if pos < lo or pos > hi:
            return -1

        # Проверка совпадения элемента
        if arr[pos] == x:
            return pos
        # Если x больше, ищем в правой части
        elif arr[pos] < x:
            return interpolation_search(arr, pos + 1, hi, x)
        # Если x меньше, ищем в левой части
        else:
            return interpolation_search(arr, lo, pos - 1, x)
    return -1



cpp

#include <iostream>
#include <vector>

int interpolationSearch(const std::vector<int>& arr, int lo, int hi, int x) {
    if (lo <= hi && x >= arr[lo] && x <= arr[hi]) {
        // Предварительно вычисляем предполагаемую позицию
        int pos;
        if (arr[hi] == arr[lo]) {
            pos = lo;
        } else {
            pos = lo + ((hi - lo) * (x - arr[lo])) / (arr[hi] - arr[lo]);
        }

        // Проверка границ
        if (pos < lo || pos > hi) {
            return -1;
        }

        // Проверка совпадения
        if (arr[pos] == x) {
            return pos;
        } else if (arr[pos] < x) {
            return interpolationSearch(arr, pos + 1, hi, x);
        } else {
            return interpolationSearch(arr, lo, pos - 1, x);
        }
    }
    return -1;
}

int main() {
    std::vector<int> array = {10, 12, 13, 16, 18, 19, 20, 21, 22};
    int target = 18;

    int index = interpolationSearch(array, 0, array.size() - 1, target);

    if (index != -1) {
        std::cout << "Элемент " << target << " найден на позиции: " << index << std::endl;
    } else {
        std::cout << "Элемент не найден" << std::endl;
    }

    return 0;
}
